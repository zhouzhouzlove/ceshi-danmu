cmake_minimum_required(VERSION 2.8)

PROJECT(perfxlab_face)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXE_LINK_FLAGS "-Wl -hash-style=sysv")

option(BUILD_WITH_OPENBLAS    "Build with OpenBLAS "  OFF)
option(BUILD_WITH_PERFDNN     "Build with PERFDNN "   ON)
option(BUILD_WITH_PERFDNN_CL  "Build with PERFDNN "   OFF)
option(BUILD_WITH_BITANSWER   "Build with BITANSWER " OFF)
option(ARMV8 "arm64-v8a" ON)
if(ARMV8)
	option(ARMV7 "armeabi-v7a" OFF)
else()
	option(ARMV7 "armeabi-v7a" ON)
endif()

if((NOT LIB_PATH))
	if(ANDROID)
		if(ARMV8)
	        	set(LIB_PATH $"${CMAKE_SOURCE_DIR}/armeabi-v7a" CACHE PATH "3rd library path")
		else(ARMV7)
	        	set(LIB_PATH "${CMAKE_SOURCE_DIR}/arm64-v8a" CACHE PATH "3rd library path")
		endif()
	else()
	       	set(LIB_PATH "/opt" CACHE PATH "3rd library path")
	endif()
endif()
##opencv
find_package(OpenCV REQUIRED COMPONENTS core highgui imgproc)
include_directories(${OpenCV_INCLUDE_DIRS} /home/perfxlab/work/face_veri_3399/face_veri_lib/inferxlite/include /home/perfxlab/work/face_veri_3399/face_veri_lib/perfblas/include /home/perfxlab/work/face_veri_3399/face_veri_lib/perfdnn/include )
link_directories(${OpenCV_LIBRARY_DIRS} /home/perfxlab/work/face_veri_3399/face_veri_lib/inferxlite/lib /home/perfxlab/work/face_veri_3399/face_veri_lib/perfblas/lib /home/perfxlab/work/face_veri_3399/face_veri_lib/perfdnn/lib)
##inferxlite
if((NOT INFERXLITE_LIB_PATH))
    set(INFERXLITE_LIB_PATH ${LIB_PATH}/inferxlite CACHE PATH "inferxlite path" FORCE)
endif()
message("-- [INFO] inferxlite path:" ${INFERXLITE_LIB_PATH})
include_directories(${INFERXLITE_LIB_PATH}/include)
link_directories(${INFERXLITE_LIB_PATH}/lib)

##perfdnn_cl
if(BUILD_WITH_PERFDNN_CL)
    if((NOT PERFDNN_CL_LIB_PATH))
        set(PERFDNN_CL_LIB_PATH ${LIB_PATH}/perfdnn_cl CACHE PATH "perfdnn_cl path")
    endif()
    message("-- [INFO] PERFDNN_CL path:" ${PERFDNN_CL_LIB_PATH})
    include_directories(${PERFDNN_CL_LIB_PATH}/include)
    link_directories(${PERFDNN_CL_LIB_PATH}/lib)
endif()
##openblas
if(BUILD_WITH_OPENBLAS)
    if((NOT openblas_LIB_PATH))
        set(openblas_LIB_PATH ${LIB_PATH}/openblas CACHE PATH "openblas path")
    endif()
    message("-- [INFO] openblas path:" ${openblas_LIB_PATH})
    include_directories(${openblas_LIB_PATH}/include)
    link_directories(${openblas_LIB_PATH}/lib)
endif()
##perfdnn
if(BUILD_WITH_PERFDNN)
    # perfblas
    if((NOT LIB_INFERX_PERFBLAS_DIR))
        set(LIB_INFERX_PERFBLAS_DIR ${LIB_PATH}/perfdnn CACHE PATH "perfblas path")
    endif()
    message("-- perfblas lib is set to ${LIB_INFERX_PERFBLAS_DIR}")
    include_directories(${LIB_INFERX_PERFBLAS_DIR}/include)
    link_directories(${LIB_INFERX_PERFBLAS_DIR}/lib)
    # perfdnn
    if(NOT LIB_INFERX_PERFDNN_DIR)
        set(LIB_INFERX_PERFDNN_DIR ${LIB_PATH}/perfblas CACHE PATH "perfdnn path")
    endif()
    message("-- perfdnn lib is set to ${LIB_INFERX_PERFDNN_DIR}")
    include_directories(${LIB_INFERX_PERFDNN_DIR}/include)
    link_directories(${LIB_INFERX_PERFDNN_DIR}/lib)
    #set(perfdnn_LIB_PATH "${LIB_PATH}/perfdnn")
    #set(perfblas_LIB_PATH "${LIB_PATH}/perfblas")
    include_directories(${LIB_INFERX_PERFBLAS_DIR}/include)
    include_directories(${LIB_INFERX_PERFDNN_DIR}/include)
    link_directories(${LIB_INFERX_PERFBLAS_DIR}/lib)
    link_directories(${LIB_INFERX_PERFDNN_DIR}/lib)
endif()
##bitanswer
if(BUILD_WITH_BITANSWER)
	set(BITANSWER_LIB_PATH "${LIB_PATH}/arm64_ubuntu")
	include_directories(${BITANSWER_LIB_PATH}/include)
	link_directories(${BITANSWER_LIB_PATH}/lib)
endif()

file(GLOB_RECURSE face_detect_feature_src "${CMAKE_SOURCE_DIR}/modules/*.cpp")
file(GLOB_RECURSE face_detect_feature_header "${CMAKE_SOURCE_DIR}/modules/*.h")
file(GLOB_RECURSE inferxlite_models_src "${CMAKE_SOURCE_DIR}/inferxlite_models/*.c")

set(face_detector_file "${CMAKE_SOURCE_DIR}/face_detector/face_detector.cpp")
set(face_veri_file "${CMAKE_SOURCE_DIR}/face_veri/face_veri.cpp")
set(face_attr_file "${CMAKE_SOURCE_DIR}/face_attr/face_attr.cpp")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -O3 -std=c99 ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -O3 -std=c++11")
include_directories(${CMAKE_SOURCE_DIR}/face_detector)
include_directories(${CMAKE_SOURCE_DIR}/face_veri)
include_directories(${CMAKE_SOURCE_DIR}/face_attr)
include_directories(${CMAKE_SOURCE_DIR}/modules)

if(ANDROID)
	add_subdirectory(android_jni)
endif()
add_subdirectory(example)
add_subdirectory(face_detector)
add_subdirectory(face_veri)
add_subdirectory(face_attr)
